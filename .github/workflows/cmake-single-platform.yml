# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.3.1

    - name: Install Qt6 Dependencies
      run: |
        chmod +x ./script/install-qt6-dependencies.sh
        ./script/install-qt6-dependencies.sh

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build gcc g++ libboost-all-dev qt6-base-dev qt6-svg-dev libsqlite3-dev default-jdk maven

    - name: Initialize Submodules Recursively
      run: git submodule update --init --recursive --jobs 4 --depth 1

    - name: Cache Vcpkg
      uses: actions/cache@v3
      with:
        path: vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg/**/portfile.cmake') }}

    - name: Bootstrap Vcpkg with Ninja
      run: |
        cd vcpkg
        VCPKG_BUILD_TYPE=release ./bootstrap-vcpkg.sh -disableMetrics
        ls -l scripts/buildsystems/vcpkg.cmake
        cd ..

    - name: Configure CMake with Vcpkg Preset
      run: |
        cmake --preset vcpkg-ninja-release -B build \
          -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DCMAKE_GENERATOR=Ninja \
          -DCMAKE_MAKE_PROGRAM=$(which ninja)
      working-directory: ${{github.workspace}}


    - name: Cache build directory
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-build-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Build with CMake Preset
      run: |
        cmake --build build --preset vcpkg-ninja-release -v
        ls build  # 添加构建目录验证
      working-directory: ${{github.workspace}}

    - name: Run Tests
      run: |
        cd build
        ctest --preset vcpkg-ninja-release -V
      working-directory: ${{github.workspace}}
